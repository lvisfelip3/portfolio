---
import '@splidejs/splide/css';

interface Props {
    images: {
        url: string;
        alt: string;
    }[];
}

const { images } = Astro.props;
---

<section class="splide" aria-label="Image Gallery">
    <div class="splide__track">
        <ul class="splide__list">
            {images.map((image) => (
                <li class="splide__slide">
                    <img
                        src={image.url}
                        alt={image.alt}
                        class="aspect-video object-cover rounded-lg"
                        decoding="async"
                    />
                </li>
            ))}
        </ul>
    </div>
</section>

<script>
    import Splide from '@splidejs/splide';
    import type { Options } from '@splidejs/splide';

    const options: Options = {
        type: 'loop',
        perPage: 1,
        width: '100%',
        autoplay: false,
        lazyLoad: 'nearby',
        pagination: true,  // Explicitly enable pagination
        arrows: true,      // Explicitly enable arrows
        breakpoints: {
            640: { perPage: 1 },
            768: { perPage: 1 },
            1024: { perPage: 1 },
        },
        // Add rendering options
        renderBullet: (_, className) => {
            return `<button class="${className}"></button>`;
        },
    };

    let splideInstances: Splide[] = [];

    function initializeSplide() {
        // Clean up existing instances
        destroySplide();

        // Initialize new instances
        const splideElements = document.querySelectorAll('.splide');
        
        splideElements.forEach((element) => {
            if (element instanceof HTMLElement) {
                // Create new instance
                const splide = new Splide(element, options);
                
                // Mount the instance
                splide.mount();
                
                // Force refresh the pagination
                splide.refresh();
                
                // Store the instance
                splideInstances.push(splide);
            }
        });
    }

    function destroySplide() {
        splideInstances.forEach(splide => {
            if (splide && typeof splide.destroy === 'function') {
                splide.destroy(true); // true parameter ensures complete cleanup
            }
        });
        splideInstances = [];
    }

    // Handle page transitions
    document.addEventListener('astro:page-load', () => {
        // Small delay to ensure DOM is fully updated
        setTimeout(initializeSplide, 0);
    });

    // Cleanup before transitions
    document.addEventListener('astro:before-preparation', destroySplide);
</script>